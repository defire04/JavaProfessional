import java.util.*;

public class Dispatcher {
    public static void main(String[] args) {

        Animal[] animals = {new Cat(5), new Dog(7), new Poodle(4), new Cat(5)};
        List<Animal> animalsList1 = new ArrayList<>(Arrays.asList(new Cat(5),new Cat(5), new Dog(7)));

        View.display(Controller.searchForSimilarElements(animals, animalsList1));
        Controller.addElementsToArrayListIfItIsNotThere(animals, animalsList1);
        View.display(animalsList1);


        String[] str = {"Serge", "Dima", "Dima","Bob", "Dima"};
        List<String> strLs = new ArrayList<>(Arrays.asList("Dima", "Dima", "Bob", "Dima"));

        View.display(Controller.searchForSimilarElements(str, strLs));
        Controller.addElementsToArrayListIfItIsNotThere(str, strLs);
        View.display(strLs);
    }
}


class Controller {
    static <T> Map<T, Integer> searchForSimilarElements(T[] array, List<? extends T> list) {
        Map<T, Integer> result = new HashMap<>();
        for (T tempFromAr : array) {
            int count = 0;
            for (T tempFromList : list) {
                if (tempFromList.equals(tempFromAr)) {
                    count++;

                }
            }
            if (result.containsKey(tempFromAr)) {
                result.put(tempFromAr, result.get(tempFromAr) + 1);
            } else if (count > 0) {
                result.put(tempFromAr, count);
            }
        }
        return result;
    }


    static <T> void addElementsToArrayListIfItIsNotThere(T[] array, List<? super T> list) {
        for (T tempFromAr : array) {
            if (!list.contains(tempFromAr)) {
                list.add(tempFromAr);
            }
        }
    }


//    With function interface
    static <T> Map<String, Long> searchForSimilarElementsWithFunctionalInterface(T[] array, List<? extends T> list) {
        List<T> tempList = new ArrayList<>(list); // for not change the list
        tempList.addAll(Arrays.asList(array));
        return tempList.stream().collect(Collectors.groupingBy(T::toString, Collectors.counting())).entrySet().stream()
                .filter(e -> e.getValue() > 1).collect(Collectors.toMap(Map.Entry::getKey,Map.Entry::getValue));
    }


    static <T> void addElementsToArrayListIfItIsNotThereWithFunctionalInterface(T[] array, List<? super T> list) {
        list.addAll(Arrays.stream(array).filter(temp -> !list.contains(temp)).toList());
    }
}



abstract class Animal {
    private int weight;

    public int getWeight() {
        return weight;
    }
    protected void setWeight(int weight) {
        this.weight = weight;
    }

    Animal() {
    }

    Animal(int weight) {
        this.weight = weight;
    }

    @Override
    public boolean equals(Object o) {

        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        return weight == ((Animal) o).weight;
    }

    @Override
    public int hashCode() {
        return this.weight * 17;
    }
}


class Dog extends Animal{
    Dog(int weight){
        super(weight);
    }

    @Override
    public String toString() {
        return "Dog with weight " + this.getWeight();
    }
}

class Poodle extends Dog{

    Poodle(int weight) {
        super(weight);
    }

    @Override
    public String toString() {
        return "Poodle with weight " + this.getWeight();
    }
}

class Cat extends Animal {
    Cat(int weight) {
        super(weight);
    }

    @Override
    public String toString() {
        return "Cat with weight " + this.getWeight();
    }
}

class View {
    public static <T> void display(T o) {
        System.out.println(o);
    }
}
